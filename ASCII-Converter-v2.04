from tkinter import *
import threading, time, re, sys

# Match is a boolean to store whether or not the two input fields match
global match, result, asciidata, triggered, firsterror
match = True

# Class containing all functions
class functions:
    def __init__(self):
        pass
    def converttoascii(data):
        characters = list(data)
        for index, item in enumerate(characters):
            characters[index] = str(ord(item)) + ' '
        result = ''.join(characters)
    def converttotext(data):
        characters = data.split(' ')
        for index, item in enumerate(characters):
            characters[index] = chr(int(item))
        result = ''.join(characters)
    def mainwresults(insert):
        output.delete(1.0, END)
        output.insert(1.0, insert)
    def clearoutputs():
        output.delete(1.0, END)
        outputc.delete(1.0, END)
    def clearall():
        output.delete(1.0, END)
        inputx.delete(1.0, END)
        input1.delete(1.0, END)
        input2.delete(0, END)
        outputc.delete(1.0, END)
    def process(asciiinput):
        asciidata = re.split('-| |\n', asciiinput)
        for index, item in enumerate(asciidata):
            try:
                if int(item) > 32 and int(item) < 126:
                    asciival = chr(int(item))
                    asciidata.remove(item)
                    asciidata.insert(index, asciival)
                else:
                    asciidata.remove(item)
                    asciidata.insert(0, '1')
            except:
                asciidata.remove(item)
                asciidata.insert(0, '1')
        while '1' in asciidata:
            try:
                asciidata.remove('1')
            except:
                break
        asciidata = ''.join(asciidata)
    def compare(asciiinput, reference):
        reference1 = list(reference)
        for index, item in enumerate(reference1):
            try:
                if item == asciiinput[index]:
                    pass
                else:
                    message = 'Found wrong value: ' + item + ' Correct value: ' + reference1[index] + ' (ASCII ' + str(ord(reference1[index])) + ')' + '\n'
                    outputc.insert(END, message)
                    if triggered == False:
                        firsterror = index
                        triggered = True
            except:
                message = 'Missing value: ' + reference1[index] +'\n'
                outputc.insert(END, message)
    def showresults(asciiinput, reference):
        if asciiinput == reference:
            outputc.insert(1.0, 'ASCII and Chars match')
            outputc.tag_add('start', 1.0, 1.21)
            outputc.tag_configure('start', foreground='green')
            outputc.insert(1.21, '\n')
        else:
            outputc.insert(1.0, 'ASCII and Chars do not match')
            outputc.tag_add('start', 1.0, 1.28)
            outputc.tag_configure('start', foreground='red')
            outputc.insert(1.28, '\n')
        outputc.insert(END, 'ASCII Input: ')
        outputc.insert(END, asciiinput + '\n')
        outputc.insert(END, 'Chars Input: ')
        outputc.insert(END, reference + '\n')
        if triggered == True:
            outputc.insert(2.0, 'Initial error occurred at character ')
            outputc.insert(2.36, firsterror)
        else:
            pass

# Startcompare processes and compares the data and then displays it. It uses functions from the functions class.

def startcompare(datatofilter, refdata):
    outputc.delete(1.0, END)
    
    functions.process(datatofilter)
    functions.compare(asciidata, refdata)
    functions.showresults(asciidata, refdata)


# These functions are used to determine if there's been any change to the input boxes and if there are, run the above comparison code.

def initcompare():
    startcompare(input1.get(1.0, END), input2.get())

comparethread = threading.Thread(target=initcompare)
comparethread.daemon = True

def compareloop():
    current1 = ''
    current2 = ''
    while True:
        if current1 == input1.get(1.0, END) and current2 == input2.get():
            current1 = input1.get(1.0, END)
            current2 = input2.get()
            time.sleep(0.2)
        else:
            try:
                comparethread.start()
                current1 = input1.get(1.0, END)
                current2 = input2.get()
                time.sleep(0.2)
            except:
                initcompare()
                current1 = input1.get(1.0, END)
                current2 = input2.get()
                time.sleep(0.2)

# This function creates the window for the compare function and starts the comparison code on a new thread.

def compare():
    comparew = Toplevel()
    comparew.title('ASCII Converter: Compare')
    comparew.configure(bg='white')
    comparew.geometry('450x400')

    global input1, input2, outputc

    t2 = Label(comparew, text='ASCII Input:')
    t2.grid(row=0, column=0)
    t2.configure(bg='white')

    input1 = Text(comparew, width=53, height=8)
    input1.configure(bd=3, wrap=WORD)
    input1.grid(row=1, padx=10)

    cf2 = LabelFrame(comparew)
    cf2.configure(bg='white', bd=0)
    cf2.grid(row=2, column=0, columnspan=3)

    l1 = Label(cf2, text='Chars Input:')
    l1.configure(bg='white')
    l1.grid(row=1, column=0)

    input2 = Entry(cf2, width=40)
    input2.configure(bd=2)
    input2.grid(row=1, column=1, columnspan=2)

    cf = LabelFrame(comparew)
    cf.configure(bg='white', bd=0)
    cf.grid(row=3, column=0)

    outputc = Text(comparew, width=53, height=10)
    outputc.configure(bd=3, wrap=WORD)
    outputc.grid(row=4, padx=10)

    clearbuttonc = Button(cf, text='Clear', command=functions.clearall)
    clearbuttonc.grid(row=2, column=0, padx=10, pady=15)

    global compareloopthread
    compareloopthread = threading.Thread(target=compareloop)
    compareloopthread.daemon = True
    compareloopthread.start()

# This function converts ASCII to text in the regular ASCII converter
# 2.05 changes

def convert(inputval):
    if mode.get() == 'Text to ASCII':
    	functions.converttoascii(inputval)
        functions.mainwresults(result)
	time.sleep(0.1)
    elif mode.get() == 'ASCII to Text':
    	functions.converttotext(inputval)
        functions.mainwresults(result)
	time.sleep(0.1)

# This loop detecs new inputs and if there are any, run the conversion program.

def eventloop():
    toconvert = ''
    currentmode = 'Text to ASCII'
    while True:
        if toconvert == inputx.get(1.0, END):
            if mode.get() == currentmode:
                time.sleep(0.1)
                continue
            else:
                toconvert = inputx.get(1.0, END)
                convert(toconvert)
                time.sleep(0.1)
        else:
            toconvert = inputx.get(1.0, END)
            convert(toconvert)
            time.sleep(0.1)

# This function creates the GUI for the main window and sets closing protocol.

def gui():
    root = Tk()
    root.geometry('400x400')
    root.title('ASCII Converter')
    root.configure(bg='white')

    global inputx, mode, output
    inputx = Text(root, width=45, height=10)
    inputx.configure(bd=3, wrap=WORD)
    inputx.grid(row=0, padx=10)

    f = LabelFrame(root)
    f.configure(bg='white', bd=0)
    f.grid(row=1, column=0)

    mode = StringVar(root)
    mode.set('Text to ASCII')

    dropdownmenu = OptionMenu(f, mode, 'Text to ASCII', 'ASCII to Text')
    dropdownmenu.grid(row=1, column=1, pady=15)

    output = Text(root, width=45, height=10)
    output.configure(bd=3, wrap=WORD)
    output.grid(row=2, padx=10)

    clearbutton = Button(f, text='Clear', command=functions.clearall)
    clearbutton.grid(row=1, column=0, padx=10)

    comparebutton = Button(f, text='Compare', command=compare)
    comparebutton.grid(row=1, column=2, padx=10)

    global process_thread
    process_thread = threading.Thread(target=eventloop)
    process_thread.daemon = True
    process_thread.start()

    def onclosing():
        sys.exit()

    root.protocol('WM_DELETE_WINDOW', onclosing)
    root.mainloop()

# This is the function that runs when the program starts. It creates a new thread for the GUI which launches all other processes.

def init():
    global gui_thread
    gui_thread = threading.Thread(target=gui)
    gui_thread.start()

init()
